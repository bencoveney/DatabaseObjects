<#+ public void WriteAttribute(DataMember attribute, bool isIdentifier) { #>

	<h3>

	<#+ if(isIdentifier) { #>
		<strong>
	<#+ } #>

	<#= attribute.Name #></h3>

	<#+ if(isIdentifier) { #>
		</strong>
	<#+ } #>

	<p><#= attribute.Name #> is a <#= attribute.GetType().Name #>.

	<#+ if(isIdentifier) { #>
		This attribute is the primary identifier for this item.
	<#+ } #>
	
	<#= PrettifyType(attribute.DataType) #> <#= PrettifyNullability(attribute.NullConstraint) #></p>

	<#+ WriteConstraints(attribute); #>

	<#+ WriteSqlDetails(attribute); #>

<#+ }

public void WriteConstraints(DataMember attribute) { #>

	<#+ if (attribute.Constraints.Count == 0) return; #>

	<strong>Constraints</strong>

	<ul>

		<#+ foreach(IConstraint constraint in attribute.Constraints) { WriteConstraint(constraint); } #>

	</ul>

<#+ }

public void WriteSqlDetails(DataMember attribute) { #>

	<#+ if(attribute.DataType.Details.ContainsKey("SqlDataType") && attribute.Details.ContainsKey("SqlColumn")) return; #>

	<strong>Sql Implementation Details:</strong>

	<ul>

		<#+ if(attribute.Details.ContainsKey("SqlColumn")) { #>
		<li>The attribute's column name is <#= attribute.Details["SqlColumn"] #>.</li>
		<#+ } #>

		<#+ if(attribute.DataType.Details.ContainsKey("SqlDataType")) { #>
		<li>The attribute's data type is <#= attribute.DataType.Details["SqlDataType"] #>.</li>
		<#+ } #>

	</ul>

<#+ }

public void WriteConstraint(IConstraint constraint) {

	string constraintTypeName = constraint.GetType().Name;
	
	switch (constraintTypeName)
	{
		case "AttributeConstraint" :
			AttributeConstraint attributeConstraint = constraint as AttributeConstraint; #>
		
			<li>The value must <#= PrettifyAttributeConstraint(attributeConstraint.Comparison) #> the attribute <#= attributeConstraint.Attribute.Name #>.</li>
		
			<#+ break;

		case "AttributeValueConstraint" :
			AttributeValueConstraint attributeValueConstraint = constraint as AttributeValueConstraint; #>
		
			<li>The value must abide by an attribute value constraint however they have not been implemented fully.</li>
		
			<#+ break;

		case "NumericValueConstraint" :
			NumericValueConstraint<Int64> numericValueConstraint = constraint as NumericValueConstraint<Int64>;#>
		
			<li>The value must <#= PrettifyNumericConstraint(numericValueConstraint.Comparison) #> <#= numericValueConstraint.Value #></li>
		
			<#+ break;

		case "StringLengthConstraint" :
			StringLengthConstraint stringLengthConstraint = constraint as StringLengthConstraint; #>
			
			<li>The length of the string must <#= PrettifyLengthConstraint(stringLengthConstraint.Comparison) #> <#= stringLengthConstraint.Value #> characters.</li>
			
			<#+ break;

		case "StringValueConstraint" :
			StringValueConstraint stringValueConstraint = constraint as StringValueConstraint; #>
			
			<li>StringValueConstraint Value="<#= stringValueConstraint.Value #>" Comparison="<#= stringValueConstraint.Comparison #>" Comparer="<#= stringValueConstraint.Comparer #>"</li>
			
			<#+ break;
		
		default:#>
		
			<li>UnknownConstraint</li>
			
			<#+ break;
	}

} #>